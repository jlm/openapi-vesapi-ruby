=begin
#Vehicle Enquiry API

#Interface specification for the DVLA Vehicle Enquiry API

The version of the OpenAPI document: 1.1.0
Contact: DvlaAPIAccess@dvla.gov.uk
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 4.3.1

=end

require 'date'

module VesAPIClient
  class Vehicle
    # Registration number of the vehicle
    attr_accessor :registration_number

    # Tax status of the vehicle
    attr_accessor :tax_status

    # Date of tax liablity, Used in calculating licence information presented to user
    attr_accessor :tax_due_date

    # Additional Rate of Tax End Date, format: YYYY-MM-DD
    attr_accessor :art_end_date

    # MOT Status of the vehicle
    attr_accessor :mot_status

    # Mot Expiry Date
    attr_accessor :mot_expiry_date

    # Vehicle make
    attr_accessor :make

    # Month of First DVLA Registration
    attr_accessor :month_of_first_dvla_registration

    # Month of First Registration
    attr_accessor :month_of_first_registration

    # Year of Manufacture
    attr_accessor :year_of_manufacture

    # Engine capacity in cubic centimetres
    attr_accessor :engine_capacity

    # Carbon Dioxide emissions in grams per kilometre
    attr_accessor :co2_emissions

    # Fuel type (Method of Propulsion)
    attr_accessor :fuel_type

    # True only if vehicle has been export marked
    attr_accessor :marked_for_export

    # Vehicle colour
    attr_accessor :colour

    # Vehicle Type Approval Category
    attr_accessor :type_approval

    # Vehicle wheel plan
    attr_accessor :wheelplan

    # Revenue weight in kilograms
    attr_accessor :revenue_weight

    # Real Driving Emissions value
    attr_accessor :real_driving_emissions

    # Date of last V5C issued
    attr_accessor :date_of_last_v5_c_issued

    # Euro Status (Dealer / Customer Provided (new vehicles))
    attr_accessor :euro_status

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'registration_number' => :'registrationNumber',
        :'tax_status' => :'taxStatus',
        :'tax_due_date' => :'taxDueDate',
        :'art_end_date' => :'artEndDate',
        :'mot_status' => :'motStatus',
        :'mot_expiry_date' => :'motExpiryDate',
        :'make' => :'make',
        :'month_of_first_dvla_registration' => :'monthOfFirstDvlaRegistration',
        :'month_of_first_registration' => :'monthOfFirstRegistration',
        :'year_of_manufacture' => :'yearOfManufacture',
        :'engine_capacity' => :'engineCapacity',
        :'co2_emissions' => :'co2Emissions',
        :'fuel_type' => :'fuelType',
        :'marked_for_export' => :'markedForExport',
        :'colour' => :'colour',
        :'type_approval' => :'typeApproval',
        :'wheelplan' => :'wheelplan',
        :'revenue_weight' => :'revenueWeight',
        :'real_driving_emissions' => :'realDrivingEmissions',
        :'date_of_last_v5_c_issued' => :'dateOfLastV5CIssued',
        :'euro_status' => :'euroStatus'
      }
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'registration_number' => :'String',
        :'tax_status' => :'String',
        :'tax_due_date' => :'Date',
        :'art_end_date' => :'Date',
        :'mot_status' => :'String',
        :'mot_expiry_date' => :'Date',
        :'make' => :'String',
        :'month_of_first_dvla_registration' => :'Date',
        :'month_of_first_registration' => :'Date',
        :'year_of_manufacture' => :'Integer',
        :'engine_capacity' => :'Integer',
        :'co2_emissions' => :'Integer',
        :'fuel_type' => :'String',
        :'marked_for_export' => :'Boolean',
        :'colour' => :'String',
        :'type_approval' => :'String',
        :'wheelplan' => :'String',
        :'revenue_weight' => :'Integer',
        :'real_driving_emissions' => :'String',
        :'date_of_last_v5_c_issued' => :'Date',
        :'euro_status' => :'String'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `VesAPIClient::Vehicle` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `VesAPIClient::Vehicle`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'registration_number')
        self.registration_number = attributes[:'registration_number']
      end

      if attributes.key?(:'tax_status')
        self.tax_status = attributes[:'tax_status']
      end

      if attributes.key?(:'tax_due_date')
        self.tax_due_date = attributes[:'tax_due_date']
      end

      if attributes.key?(:'art_end_date')
        self.art_end_date = attributes[:'art_end_date']
      end

      if attributes.key?(:'mot_status')
        self.mot_status = attributes[:'mot_status']
      end

      if attributes.key?(:'mot_expiry_date')
        self.mot_expiry_date = attributes[:'mot_expiry_date']
      end

      if attributes.key?(:'make')
        self.make = attributes[:'make']
      end

      if attributes.key?(:'month_of_first_dvla_registration')
        self.month_of_first_dvla_registration = attributes[:'month_of_first_dvla_registration']
      end

      if attributes.key?(:'month_of_first_registration')
        self.month_of_first_registration = attributes[:'month_of_first_registration']
      end

      if attributes.key?(:'year_of_manufacture')
        self.year_of_manufacture = attributes[:'year_of_manufacture']
      end

      if attributes.key?(:'engine_capacity')
        self.engine_capacity = attributes[:'engine_capacity']
      end

      if attributes.key?(:'co2_emissions')
        self.co2_emissions = attributes[:'co2_emissions']
      end

      if attributes.key?(:'fuel_type')
        self.fuel_type = attributes[:'fuel_type']
      end

      if attributes.key?(:'marked_for_export')
        self.marked_for_export = attributes[:'marked_for_export']
      end

      if attributes.key?(:'colour')
        self.colour = attributes[:'colour']
      end

      if attributes.key?(:'type_approval')
        self.type_approval = attributes[:'type_approval']
      end

      if attributes.key?(:'wheelplan')
        self.wheelplan = attributes[:'wheelplan']
      end

      if attributes.key?(:'revenue_weight')
        self.revenue_weight = attributes[:'revenue_weight']
      end

      if attributes.key?(:'real_driving_emissions')
        self.real_driving_emissions = attributes[:'real_driving_emissions']
      end

      if attributes.key?(:'date_of_last_v5_c_issued')
        self.date_of_last_v5_c_issued = attributes[:'date_of_last_v5_c_issued']
      end

      if attributes.key?(:'euro_status')
        self.euro_status = attributes[:'euro_status']
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      invalid_properties = Array.new
      if @registration_number.nil?
        invalid_properties.push('invalid value for "registration_number", registration_number cannot be nil.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      return false if @registration_number.nil?
      tax_status_validator = EnumAttributeValidator.new('String', ["Not Taxed for on Road Use", "SORN", "Taxed", "Untaxed"])
      return false unless tax_status_validator.valid?(@tax_status)
      mot_status_validator = EnumAttributeValidator.new('String', ["No details held by DVLA", "No results returned", "Not valid", "Valid"])
      return false unless mot_status_validator.valid?(@mot_status)
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] tax_status Object to be assigned
    def tax_status=(tax_status)
      validator = EnumAttributeValidator.new('String', ["Not Taxed for on Road Use", "SORN", "Taxed", "Untaxed"])
      unless validator.valid?(tax_status)
        fail ArgumentError, "invalid value for \"tax_status\", must be one of #{validator.allowable_values}."
      end
      @tax_status = tax_status
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] mot_status Object to be assigned
    def mot_status=(mot_status)
      validator = EnumAttributeValidator.new('String', ["No details held by DVLA", "No results returned", "Not valid", "Valid"])
      unless validator.valid?(mot_status)
        fail ArgumentError, "invalid value for \"mot_status\", must be one of #{validator.allowable_values}."
      end
      @mot_status = mot_status
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          registration_number == o.registration_number &&
          tax_status == o.tax_status &&
          tax_due_date == o.tax_due_date &&
          art_end_date == o.art_end_date &&
          mot_status == o.mot_status &&
          mot_expiry_date == o.mot_expiry_date &&
          make == o.make &&
          month_of_first_dvla_registration == o.month_of_first_dvla_registration &&
          month_of_first_registration == o.month_of_first_registration &&
          year_of_manufacture == o.year_of_manufacture &&
          engine_capacity == o.engine_capacity &&
          co2_emissions == o.co2_emissions &&
          fuel_type == o.fuel_type &&
          marked_for_export == o.marked_for_export &&
          colour == o.colour &&
          type_approval == o.type_approval &&
          wheelplan == o.wheelplan &&
          revenue_weight == o.revenue_weight &&
          real_driving_emissions == o.real_driving_emissions &&
          date_of_last_v5_c_issued == o.date_of_last_v5_c_issued &&
          euro_status == o.euro_status
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [registration_number, tax_status, tax_due_date, art_end_date, mot_status, mot_expiry_date, make, month_of_first_dvla_registration, month_of_first_registration, year_of_manufacture, engine_capacity, co2_emissions, fuel_type, marked_for_export, colour, type_approval, wheelplan, revenue_weight, real_driving_emissions, date_of_last_v5_c_issued, euro_status].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      new.build_from_hash(attributes)
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      self.class.openapi_types.each_pair do |key, type|
        if type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[self.class.attribute_map[key]].is_a?(Array)
            self.send("#{key}=", attributes[self.class.attribute_map[key]].map { |v| _deserialize($1, v) })
          end
        elsif !attributes[self.class.attribute_map[key]].nil?
          self.send("#{key}=", _deserialize(type, attributes[self.class.attribute_map[key]]))
        end # or else data not found in attributes(hash), not an issue as the data can be optional
      end

      self
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def _deserialize(type, value)
      case type.to_sym
      when :DateTime
        DateTime.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        VesAPIClient.const_get(type).build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end
        
        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end
  end
end
